<?php
/**
 * @file
 * Tesis requests.
 */

/**
 * Implements hook_views_api().
 */
function tu_requests_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'tu_requests') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function tu_requests_permission() {
  return array(
    'request_teacher' => array(
      'title' => t('Request teacher'),
      'description' => t('Request teacher'),
    ),
    'response_request_teacher' => array(
      'title' => t('Response request teacher'),
      'description' => t('Response request teacher'),
    ),

  );
}

/**
 * Implements hook_menu().
 */
function tu_requests_menu() {
  $items['request/teacher/%node'] = array(
    'title' => 'Crear solicitud de docente',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_tu_requests_est_form', 2),
    'access arguments' => array('request_teacher'),
  );

  $items['solicitudes'] = array(
    'title' => 'Solicitudes',
    'page callback' => '_tu_requests_request_page',
    'access arguments' => array('response_request_teacher'),
  );

  $items['request/teacher/response/%node'] = array(
    'title' => 'Responder solicitud',
    'title callback' => '_response_request_title',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_tu_requests_response_form', 3),
    'access arguments' => array('response_request_teacher'),
  );

  $items['request/teacher-item'] = array(
    'page callback' => '_tu_requests_teachers_autocomplete',
    'access arguments' => array('request_teacher'),
  );

  return $items;
}


/**
 * Callback _tu_requests_teachers_autocomplete.
 */
function _tu_requests_teachers_autocomplete($string) {
  $users = array();
  $query = db_select('users', 'u');
  $query->join('users_roles', 'ur', 'u.uid = ur.uid');
  $query->fields('u', array('uid', 'name'));
  $query->condition('u.name', '%' . db_like($string) . '%', 'LIKE');
  $query->condition('ur.rid', 4);
  $query->condition('u.status', 1);
  $results = $query->range(0, 15)->execute();

  foreach ($results as $result) {
    $users[$result->uid . '|' . $result->name] = check_plain($result->name);
  }
  drupal_json_output($users);
}

/**
 * Request teacher form.
 */
function _tu_requests_est_form($form, &$form_state, $node) {
  $form_state['strorage']['node'] = $node;
  $form['author']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Profesor'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'request/teacher-item',
    '#required' => TRUE,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Request'));

  return $form;
}

/**
 * Title callback.
 */
function _response_request_title($node) {
  return t('Responder solicitud del proyecto @pro', array('@pro' => $node->title));
}

/**
 * Request teacher form validate.
 */
function _tu_requests_est_form_validate($form, &$form_state) {
  global $user;
  $nid = $form_state['strorage']['node']->nid;
  $query = db_select('tu_requests', 'tr');
  $query->fields('tr');
  $query->condition('tr.nid', $nid);
  $results = $query->execute()->fetchAssoc();
  if ($results) {
    form_set_error('name', t('Solicitud previamente enviada'));
  }
}

/**
 * Request teacher form submit.
 */
function _tu_requests_est_form_submit($form, &$form_state) {
  global $user;
  $nid = $form_state['strorage']['node']->nid;
  $tuid = explode('|', $form_state['values']['name']);
  $tuid = $tuid[0];
  $status = 0;
  $created = REQUEST_TIME;
  $record = array(
    'nid' => $nid,
    'uid' => $user->uid,
    'tuid' => $tuid,
    'status' => $status,
    'created' => $created,
  );
  drupal_write_record('tu_requests', $record);
  drupal_set_message(t('Solicitud enviada'));
}

/**
 * Implements hook_block_info().
 */
function tu_requests_block_info() {
  $blocks['bl_request_pen'] = array(
    'info' => t('Solicitudes pendientes'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tu_requests_block_view($delta = '') {
  $block = array();
  global $user;
  switch ($delta) {
    case 'bl_request_pen':
      if (user_is_logged_in() && isset($user->roles[4])) {
        $num = db_select('tu_requests', 'tr')
          ->fields('tr')
          ->condition('tr.status', 0)
          ->condition('tr.tuid', $user->uid)
          ->countQuery()
          ->execute()
          ->fetchField();
        $text = t('Solicitudes') . ' (' . $num . ')';
        $block['content'] = l($text, 'solicitudes');
      }

      break;

  }
  return $block;
}


/**
 * Request response teacher form.
 */
function _tu_requests_response_form($form, &$form_state, $node) {
  $form_state['strorage']['node'] = $node;
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Respuesta'),
    '#options' => array(
      1 => t('Aprovar'),
      2 => t('Rechazar'),
    ),
    '#required' => TRUE,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Request'));

  return $form;
}

/**
 * Request response teacher form submit.
 */
function _tu_requests_response_form_submit($form, &$form_state) {
  global $user;
  $status = $form_state['values']['status'];
  if ($status == 1) {
    $node = $form_state['strorage']['node'];
    $node->field_project_teacher[LANGUAGE_NONE][0]['target_id'] = $user->uid;
    node_save($node);
  }

  $nid = $form_state['strorage']['node']->nid;
  db_update('tu_requests')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('nid', $nid)
    ->execute();
  $form_state['redirect'] = 'teacher-requests';
  drupal_set_message(t('Solicitud respondida correctamente'));
}

/**
 * PAge solicitudes callback.
 */
function _tu_requests_request_page() {
  global $user;
  $rows = array();
  $headers = array("Proyecto", "Enviado por", "Estado", "Enviado", "Acciones");
  $query = db_select('tu_requests', 'tr')
    ->fields('tr')
    ->condition('tr.tuid', $user->uid);
  $results = $query->execute();

  while ($record = $results->fetchAssoc()) {
    $status = ($record['status'] == 0) ? 'Pendiente' : (($record['status'] == 1) ? 'Aprovado' : 'Rechazado');
    $node = node_load($record['nid']);
    $action = ($record['status'] == 0) ? l(t('Constestar'), 'request/teacher/response/' . $record['nid']) : '-';
    $rows[] = array(
      $node->title,
      user_load($record['uid'])->name,
      $status,
      date('d/m/Y', $record['created']),
      $action,
    );
  }
  return theme('table', array(
    'header' => $headers,
    'rows' => $rows,
    'attributes' => array('class' => array('solitudes'))
  ));

}
